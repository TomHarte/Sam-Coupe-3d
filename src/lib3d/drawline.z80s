;
;	Here are the routines related to actual line drawing.
;
;	Exposed calls are:
;
;		SetLineColour, which sets the colour for future draws
;		according to the value in the a register (which should
;		be e.g. 0xff for colour 15, 0xee for colour 14,
;		0xbc for a colour 11/colour 12 screen-oriented stipple)
;
;		DrawLine, which draws a line. It doesn't check that its
;		staying on screen or in any other way clip, and integer
;		sizes are used such that it assumes the display to be
;		no larger than 256x256.
;
;		ClearLine, which is a lot line DrawLine in that it draws
;		a line of colour 0 but may also blank out pixels that
;		simply happen to adjoin the line, as it sees fit. So its
;		like DrawLine except that it doesn't really care about
;		sub-byte plotting precision and you can't change its
;		colour. It's a fast way to erase.
;
;	The routine is just classic Bresenham, implemented in a
;	fairly rote way. The polygon filler, elsewhere, uses
;	the run-length version Bresenham when appropriate, at the
;	cost of an 8 bit division (note: it is explicitly NOT
;	the DDA algorithm), which might be worth investigating
;	as an alternative since in practice we're probably going
;	to be displaying large shapes with simple geometry,
;	meaning long lines, so the extra cost of a divide before
;	beginning might be offset by the per-pixel savings.
;
;	A really efficient replacement might consider the length
;	of the line and branch either into classic Bresenham or
;	run-length Bresenham.
;
;	Related thought: I think one of the tricks used by the
;	Fred-or-wherever 50Hz 3d vector demo was to have every
;	single possible line draw precomputed - 256*192
;	possibilities and you just enter with HL or whatever
;	set to the top left pixel. That's a bit of a demo hack
;	but might also actually be useful here, possibly some
;	sort of run length or hard coded decision that might have
;	to switch a little early due to memory overhead concerns?
;

;
;
;	SetLineColour - lines from now on will be in the colour 'a'
;
;	This clobbers a. The colour change is achieved by dynamically
;	reprogramming DrawLine.
;
SetLineColour:
		ld (twobyte1+1), a			; okay, so there's one place where we
									; want the two byte version of the colour
									; to be a constant …

		push af
		and 0xf0
		ld (highbyte1+1), a			; … three places where we want just the high
		ld (highbyte2+1), a			; nibble (accepting that the names could have
		ld (highbyte3+1), a			; been better chosen) …
		pop af
		and 0x0f
		ld (lowbyte1+1), a			; … and three places where we want just the
		ld (lowbyte2+1), a			; low nibble.
		ld (lowbyte3+1), a

	ret

;
;	DrawLine - draws a line from (L, H) to (E, D)
;	clobbers: everything except ix & iy
;
DrawLine:

		; DrawLine first stores a record into the line table
		; (the current end of which is pointed to by LineTabPtr)
		; to record the line that it's about to draw. That means
		; that when it becomes time to clear the frame, there's a
		; record of all lines that need to be rubbed out.

			ld ix, (LineTabPtr)
			ld (ix), h
			ld (ix+1), l
			ld (ix+2), d
			ld (ix+3), e
			ld (ix+4), 0xff
			ld bc, 4
			add ix, bc
			ld (LineTabPtr), ix

	;
	; Exactly how you apply Bresenham depends on which octant of
	; a circle your line falls under. We'll divide into quadrants
	; first, so we need first to decide whether the direction from
	; start to end point is positive or negative along x and y.
	;
	; We can reduce this to two cases by switching the start point
	; and end point over if the need arises, so this initial bit
	; of code is about getting into a position where the start
	; coordinate is definitely on the left of the end coordinate
	; and we know whether the line heads upward or downward.
	;


	; one of four jumps first, to combos of x pos/neg and y pos/neg

		ld a, d
		sub h
		ld b, a
		jr nc, @+ypos		; i.e. we've just made a decision based on the
							; sign of the difference in y

		; y is negative
			ld a, e
			sub l
			jp nc, @+xposyneg		; if x was positive then we've hit the
									; x is positive, y is negative case and
									; can jump down into the line drawing

			; otherwise we'll flip the coordinates over, meaning that
			; we're at x is positive and now y is too. So do that and
			; then proceed to drawing

			ex de, hl	; now x and y are positive
			ld a, d
			sub h
			ld b, a
			ld a, e
			sub l

			jr @+xposypos

		@ypos:

		; y is positive
			ld a, e
			sub l
			jr nc, @+xposypos		; neato, x is positive too so there's
									; no need for a start point/end point
									; swap around

			; okay, we'll swap start and end points, inverting signs,
			; to give us x positive, y negative and then move on to drawing

			ex de, hl	; now x is positive, but y is negative
			ld a, d
			sub h
			ld b, a
			ld a, e
			sub l

			jp @+xposyneg

	; now the line drawing routines themselves...

;----------------------------------------------------------------------------------------------
	@xposypos:

		; we've entered here with a positive y difference in b and
		; a positive x difference in a. Per standard Bresenham behaviour
		; we need to decide whether we're going to plot a pixel for
		; every single x coordinate and just worry about how y varies
		; or plot a pixel for every single y coordinate and just worry
		; about how x varies

		cp b
		jp nc, @+xdiffgreater		; if there's a greater difference in x
									; than y then we'll plot every single
									; x by hopping down to the xdiffgreater
									; segment of this routine

		@ydiffgreater:
		
		; if we're here then we're going to plot a pixel at every y
		; and worry about changes in x
		
		ld e, b			; e = dy
		ld d, a			; d = dx
		ld b, e			; b = pixel count (which = dy at this stage)

		ld a, e
		srl a			; a = error = dy >> 1

		; put hl - the position of the start of the line - onto the stack
		push hl
		exx
			ld de, 128		; Load 128 to de' - this is what we'll
							; add to hl to effect a change in y, at
							; least via this entry point. The y negative
							; drawer will just load a different set of
							; initial values and then jump into ydil,
							; immediately below
		@ydil:
			pop hl			; pop the current position
			ld b, 0xf0		; load b and c with masks
			ld c, 0x0f

			; convert HL into an address, and decide whether we're
			; going to set the right pixel from the current byte
			; or the left
			scf
			rr h
			rr l
		exx
		jr nc, @+pelloopleft

			@pelloopright:
			
				; we're currently plotting right pixels…

				sub d					; standard Bresenham stuff, subtract
										; the delta x from our error variable,
										; which is in the accumulator
										
				jr nc, @+nojumpl		; if that doesn't put us below zero,
										; we'll continue at this x position (ie,
										; so we're plotting right pixels)

					add e				; otherwise, we add the delta y to our
										; error pot...
					exx
						inc l			; … and move one pixel to the right
					jr @+nojumprpexx

				@nojumpl:				; at this point we can just plot a pixel, so:
					exx					; expose our address in hl
						add hl, de		; proceed down one location

						ex af, af'		; saving real a (our error variable),
						ld a, (hl)		; load in the pixel, 
						and b			; and off the left hand half,
lowbyte1:				or 0x0f			; or in the new colour
						ld (hl), a		; write the pixel out again
						ex af, af'		; and recover our original a

					exx					; save our hl address again

			djnz @-pelloopright		; decrement our pixels-to-draw counter,
									; and continue to the next pixel if necessary
		ret

			@pelloopleft:

				; in here we're currently plotting left pixels…

				sub d					; normal Bresenham stuff, as above, so
										; subtract delta x…
										
				jr nc, @+nojumpr		; … continue unabated if there's enough
										; error left, but…

					add e				; … otherwise add delta y back in and switch
					jr @-nojumpl		; to plotting right pixels

				@nojumpr:
					exx					; juggle our registers
				@nojumprpexx:
						add hl, de		; move down (or up) a line

						ex af, af'		; plot the pixel, being careful to preserve a
						ld a, (hl)
						and c
highbyte1:				or 0xf0
						ld (hl), a
						ex af, af'
					exx					; put the registers back how they were

			djnz @-pelloopleft			; continue with left pixels, at least for now
		ret

;
; Okay, that was all the 'step constantly along y, consider altering x' Bresenham stuff.
; Now for the 'step constantly along x, consider altering y' stuff. Whereas the stuff
; above had sort of a holding pattern for left and right pixels (since x changed
; 'infrequently'), this runs straight through always switching from left to right to
; left to right.
;

		@xdiffgreater:		; a = positive x difference, b = positive y difference

			; if dx = dy = 0 then the code will get here
			and a
			ret z

		ld e, b			; e = dy
		ld d, a			; d = dx
		ld b, a			; b = dx and pixel count

		srl a			; a = error = dx >> 1

		push hl
		exx
			ld de, 128
		@xdil:
			pop hl
			ld b, 0xf0
			ld c, 0x0f

			; convert HL into an address, and do an odd plot if necessary
			scf
			rr h
			rr l
		exx
		jr nc, @+nooddplot

			sub e		; error -= dy
			jr nc, @+noychange

				add d	; error += dx
					; y ++
				exx
					add hl, de
				exx

			@noychange:

				dec b
				exx
					ex af, af'
					ld a, (hl)
					and b
lowbyte2:			or 0x0f
					ld (hl), a
					ex af, af'

					inc l
				exx

		@nooddplot:

			srl b
				jr z, @+noloop
				push af

			@dpelloop:

				sub e
				jr nc, @+noychange

					; y ++
					exx
						add hl, de
					exx

					add d	; error += dx

				@noychange:

					sub e
				jr nc, @+noychange

					add d
					ex af, af'

					exx

						ld a, (hl)
						and c
highbyte2:				or 0xf0
						ld (hl), a

						add hl, de

						ld a, (hl)
						and b
lowbyte3:				or 0x0f
						ld (hl), a
					exx

					ex af, af'
					jr @+checkb

				@noychange:
					exx
twobyte1:					ld (hl), 0xff
					exx

				@checkb:
				exx
					inc l
				exx
				djnz @-dpelloop

			pop af
			@noloop:
			ret nc

			sub e		; error -= dy
			exx
			jr nc, @+noychange

					; y ++
					add hl, de

			@noychange:

					ld a, (hl)
					and c
highbyte3:			or 0xf0
					ld (hl), a

		ret

;----------------------------------------------------------------------------------------------
	@xposyneg:

		; starts with negative y difference in b, positive x difference in a
		ld c, a
		ld a, b
		neg
		ld b, a
				; now b has positive y difference, positive x is in c
		cp c
		jp nc, @+ydiffgreater

		@xdiffgreater:		; a = positive x difference, b = positive y difference
		ld e, b			; e = dy
		ld d, c			; d = dx
		ld b, c			; b = dx and pixel count

		ld a, c
		srl a			; a = error = dx >> 1

		push hl
		exx
		ld de, -128
		jp @-xdil

		@ydiffgreater:

		ld e, b			; e = dy
		ld d, c			; d = dx
		ld b, e			; b = dy and pixel count

		ld a, e
		srl a			; a = error = dy >> 1

		push hl
		exx
		ld de, -128
		jp @-ydil


;
;	ClearLine - draws a black line from (L, H) to (E, D), possibly doing some extra black pixels by the side
;	clobbers: everything except ix & iy
;
ClearLine:
	; one of four jumps first, to combos of x pos/neg and y pos/neg

		ld a, d
		sub h
		ld b, a
		jr nc, @+ypos

		; y is negative
			ld a, e
			sub l
			jp nc, @+xposyneg

			ex de, hl	; now x and y are positive
			ld a, d
			sub h
			ld b, a
			ld a, e
			sub l

			jr @+xposypos

		@ypos:

		; y is positive
			ld a, e
			sub l
			jr nc, @+xposypos

			ex de, hl	; now x is positive, but y is negative
			ld a, d
			sub h
			ld b, a
			ld a, e
			sub l

			jp @+xposyneg


	; now the routines themselves...

;----------------------------------------------------------------------------------------------
	@xposypos:

		; starts with positive y difference in b, positive x difference in a
		cp b
		jp nc, @+xdiffgreater

		@ydiffgreater:
		ld e, b			; e = dy
		ld d, a			; d = dx
		ld b, e			; b = dy and pixel count

		ld a, e
		srl a			; a = error = dy >> 1

		; get hl into hl', turn into address load 128 to de'
		push hl
		exx
			pop hl
			ld de, 128
		@ydil:
			ld b, 0		; b is the only spare register, this value is picked randomly

			; convert HL into an address, and jump to plot left if necessary
			scf
			rr h
			rr l
		exx

		jr nc, @+pelloopleft

			@pelloopright:

				sub d
				jr nc, @+nojumpl

					add e
					exx
						inc l
					jr @+nojumprpexx

				@nojumpl:
					exx
						add hl, de
						ld (hl), b
					exx

			djnz @-pelloopright
		ret

			@pelloopleft:

				sub d
				jr nc, @+nojumpr

					add e
					jr @-nojumpl

				@nojumpr:
					exx
				@nojumprpexx:
						add hl, de
						ld (hl), b
					exx

			djnz @-pelloopleft
		ret

		@xdiffgreater:		; a = positive x difference, b = positive y difference

			; if dx = dy = 0 then the code will get here
			and a
			ret z

		ld e, b			; e = dy
		ld d, a			; d = dx
		ld b, a			; b = dx and pixel count

		srl a			; a = error = dx >> 1

		push hl
		exx
			ld de, 128
		@xdil:
			pop hl
			ld b, 0

			; convert HL into an address, and do an odd plot if necessary
			scf
			rr h
			rr l
		exx
		jr nc, @+nooddplot

			sub e		; error -= dy
			jr nc, @+noychange

				add d	; error += dx
					; y ++
				exx
					add hl, de
				exx

			@noychange:

				dec b
				exx
					ld (hl), b
					inc l
				exx

		@nooddplot:

			srl b
				jr z, @+noloop
				push af

			@dpelloop:

				sub e
				jr nc, @+noychange

					; y ++
					exx
						add hl, de
					exx

					add d	; error += dx

				@noychange:

					sub e
				jr nc, @+noychange

					add d
					ld c, a

					exx
						ld (hl), b
						add hl, de
						ld (hl), b
					exx

					ld a, c
					jr @+checkb

				@noychange:
					exx
						ld (hl), b
					exx

				@checkb:
				exx
					inc l
				exx
				djnz @-dpelloop

			pop af
			@noloop:
			ret nc

			sub e		; error -= dy
			exx
			jr nc, @+noychange

					; y ++
					add hl, de

			@noychange:

					ld (hl), b

		ret

;----------------------------------------------------------------------------------------------
	@xposyneg:

		; starts with negative y difference in b, positive x difference in a
		ld c, a
		ld a, b
		neg
		ld b, a
				; now b has positive y difference, positive x is in c
		cp c
		jp nc, @+ydiffgreater

		@xdiffgreater:		; a = positive x difference, b = positive y difference
		ld e, b			; e = dy
		ld d, c			; d = dx
		ld b, c			; b = dx and pixel count

		ld a, c
		srl a			; a = error = dx >> 1

		push hl
		exx
		ld de, -128
		jp @-xdil

		@ydiffgreater:

		ld e, b			; e = dy
		ld d, c			; d = dx
		ld b, e			; b = dy and pixel count

		ld a, e
		srl a			; a = error = dy >> 1

		push hl
		exx
		pop hl
		ld de, -128
		jp @-ydil
